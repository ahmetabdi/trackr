<div class="ui grid stackable">
  <div class="sixteen wide column">
    <h1><%= link_to @amazon_product.title, @amazon_product.detail_page_url, target: '_blank' %></h1>
  </div>

  <div class="sixteen wide column">
    <div class="column">
      <a class="ui green button" href="<%= @amazon_product.detail_page_url %>" target="_blank">
        <i class="shop icon"></i>Buy
      </a>

      <div class="ui blue button modal-launcher">
        <i class="star icon"></i>Watch
      </div>
    </div>
  </div>

  <div class="two column wide row">
    <div class="nine wide column">
      <div class="ui vertically grid">
        <div class="column">
          <div class="ui label image white">
            <i class="money icon"></i>Price
            <div class="detail"><b><%= number_to_currency(@amazon_product.presenter.price) %></b></div>
          </div>

          <div class="ui label image white">
            <i class="star icon"></i>Sales Rank
            <div class="detail"><b><%= @amazon_product.current_sales_rank %></b></div>
          </div>
          <p>Last scanned: <%= time_ago_in_words(@amazon_product.scanned_at) %></p>
        </div>
      </div>
    </div>

    <div class="seven wide column right aligned">
      <div class="ui vertically grid">
        <div class="column row">
          <div class="column">
            <div class="ui label image white">
              High
              <div class="detail"><b><%= number_to_currency(@amazon_product.presenter.maximum_price) %></b></div>
            </div>

            <div class="ui label image white">
              Low
              <div class="detail"><b><%= number_to_currency(@amazon_product.presenter.minimum_price) %></b></div>
            </div>

            <div class="ui label image white">
              Average
              <div class="detail"><b><%= number_to_currency(@amazon_product.presenter.average_price) %></b></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="ui tiny images grid">
  <div id="lightgallery">
  <% @amazon_product.variant_large_images.reverse.each do |image| %>
    <a href="<%= image %>">
      <img class="ui image" src="<%= image %>" />
    </a>
  <% end %>
  </div>
</div>

<h3>Latest recorded prices</h3>

<div class="ui two column divided stackable grid">
  <div class="row">
    <div class="column">
      <canvas id="pricesChart" width="400" height="200"></canvas>
    </div>
    <div class="column">
      <table class="ui celled table">
        <thead>
          <tr><th>Date</th>
          <th>Price</th>
        </tr></thead>
        <tbody>
          <% @recorded_prices.first(5).each do |date, price| %>
          <tr>
            <td><%= date %></td>
            <td><%= number_to_currency(price / 100.0) %></td>
          </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<h3>Latest sales ranks</h3> (<em>Lower is better</em>)

<div class="ui two column divided stackable grid">
  <div class="row">
    <div class="column">
      <canvas id="salesRankChart" width="400" height="200"></canvas>
    </div>
    <div class="column">
      <table class="ui celled table">
        <thead>
          <tr><th>Date</th>
          <th>Rank</th>
        </tr></thead>
        <tbody>
          <% @recorded_sales_ranks.first(5).each do |date, sales_rank| %>
          <tr>
            <td><%= date %></td>
            <td><%= sales_rank %></td>
          </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<% if @amazon_product.features %>
<div class="ui segment">
  <p><%= @amazon_product.features.to_sentence %></p>
</div>
<% end %>

<script>
  var ctx = document.getElementById("pricesChart");
  var scatterChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: <%= raw @recorded_prices.keys %>,
      datasets: [{
          label: "Amazon",
          data: <%= raw @recorded_prices.values %>,
          fill: true,
          lineTension: 0,
          backgroundColor: "rgba(75,192,192,0.4)",
          borderColor: "rgba(75,192,192,1)",
          borderCapStyle: 'butt',
          borderDashOffset: 0.0,
          borderJoinStyle: 'miter',
          pointBorderColor: "rgba(75,192,192,1)",
          pointBackgroundColor: "#fff",
          pointBorderWidth: 1,
          pointHoverRadius: 5,
          pointHoverBackgroundColor: "rgba(75,192,192,1)",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointHoverBorderWidth: 5,
          pointRadius: 5,
          pointHitRadius: 10,
        }
      ]
    },
    options: {
      scales: {
        yAxes: [
          {
            ticks: {
              callback: function(label, index, labels) {
                var currency = parseFloat(label * 0.01);
                return " £" + Number(currency).toFixed(2);
              }
            }
          }
        ]
      },
      tooltips: {
        callbacks: {
          label: function(tooltipItem, data) {
            var currency = parseFloat(tooltipItem.yLabel * 0.01);
            return " £" + Number(currency).toFixed(2);
          }
        }
      }
    }
  });
</script>

<script>
  var ctx = document.getElementById("salesRankChart");
  var scatterChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: <%= raw @recorded_sales_ranks.keys %>,
      datasets: [{
          label: "Amazon",
          data: <%= raw @recorded_sales_ranks.values %>,
          fill: true,
          lineTension: 0,
          backgroundColor: "rgba(75,192,192,0.4)",
          borderColor: "rgba(75,192,192,1)",
          borderCapStyle: 'butt',
          borderDashOffset: 0.0,
          borderJoinStyle: 'miter',
          pointBorderColor: "rgba(75,192,192,1)",
          pointBackgroundColor: "#fff",
          pointBorderWidth: 1,
          pointHoverRadius: 5,
          pointHoverBackgroundColor: "rgba(75,192,192,1)",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointHoverBorderWidth: 5,
          pointRadius: 5,
          pointHitRadius: 10,
        }
      ]
    },
    options: {
      scales: {
        yAxes: [
          {
            ticks: {
              callback: function(label, index, labels) {
                return Number(label);
              }
            }
          }
        ]
      },
      tooltips: {
        callbacks: {
          label: function(tooltipItem, data) {
            return ' ' + Number(tooltipItem.yLabel);
          }
        }
      }
    }
  });
</script>

<div class="ui modal">
  <i class="close icon"></i>
  <div class="header">
    Add to watchlist
  </div>
  <div class="content">
    <%= form_tag('', class: 'ui large form add_to_watchlist') do %>
      <div class="field">
        <label>Email Address* (Or <%= link_to 'create an account', register_path %> so you can manage your watchlists)</label>
        <div class="ui left icon input">
          <i class="user icon"></i>
          <%= email_field_tag :email, nil, autofocus: true, placeholder: 'E-mail address', required: true %>
        </div>
      </div>
      <div class="field">
        <label>Desired Price*</label>
        <div class="ui left labeled input">
          <div class="ui label">£</div>
          <%= number_field_tag :desired_price, nil, placeholder: '7.99', required: true %>
        </div>
      </div>

      <%= submit_tag 'Add', class: 'ui positive primary submit button' %>
    <% end %>
  </div>
</div>
