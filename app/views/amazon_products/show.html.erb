<h1><%= @amazon_product.title %></h1>

<div class="column row">
  <div class="column">
    <div class="ui big breadcrumb">
      <a class="section"><%= link_to friendly_name(@amazon_product.amazon_product_group.name), amazon_product_group_path(@amazon_product.amazon_product_group) %></a>
      <i class="right chevron icon divider"></i>
      <a class="section"><%= @amazon_product.manufacturer %></a>
    </div>
  </div>
</div>

<div><p>Last scanned: <%= time_ago_in_words(@amazon_product.scanned_at) %></p></div>
<div class="extra content">
  <% unless @amazon_product.amazon_product_histories.average(:price).nil? %>
    <div><p>Average: <%= number_to_currency(@amazon_product.amazon_product_histories.average(:price) / 100.0) %></p></div>
  <% end %>
</div>

<div class="ui mini statistics">
  <div class="statistic">
    <div class="value">
      <%= number_to_currency(@amazon_product.presenter.maximum_price) %>
    </div>
    <div class="label">
      HIGH
    </div>
  </div>
  <div class="statistic">
    <div class="value">
      <%= number_to_currency(@amazon_product.presenter.minimum_price) %>
    </div>
    <div class="label">
      LOW
    </div>
  </div>
  <div class="statistic">
    <div class="value">
      <%= number_to_currency(@amazon_product.presenter.average_price) %>
    </div>
    <div class="label">
      AVERAGE
    </div>
  </div>
</div>

<div class="ui vertically grid">
  <div class="column row">
    <div class="column">
      <div class="ui label">
        <i class="money icon"></i>Price
        <div class="detail"><%= number_to_currency(@amazon_product.current_price / 100.0) %></div>
      </div>

      <div class="ui label">
        <i class="fire icon"></i>Heat
        <div class="detail"><%= 0 %></div>
      </div>

      <div class="ui label">
        <i class="star icon"></i>Sales Rank
        <div class="detail"><%= @amazon_product.current_sales_rank %></div>
      </div>
    </div>
  </div>

</div>

<div class="ui tiny images container">
  <div id="lightgallery">
  <% @amazon_product.variant_large_images.reverse.each do |image| %>
    <a href="<%= image %>">
      <img class="ui image" src="<%= image %>" />
    </a>
  <% end %>
  </div>
</div>

<button class="ui orange button">Buy</button>

<% data = @amazon_product.amazon_product_histories.group_by_day(:created_at, format: "%b %-d", series: false).minimum(:price) %>

<div class="ui two column divided grid">
  <div class="row">
    <div class="column">
      <canvas id="myChart" width="400" height="200"></canvas>
    </div>
    <div class="column">
      <h3>Latest recorded prices</h3>
      <table class="ui celled table">
        <thead>
          <tr><th>Date</th>
          <th>Price</th>
        </tr></thead>
        <tbody>
          <% data.first(4).each do |date, price| %>
          <tr>
            <td><%= date %></td>
            <td><%= number_to_currency(price / 100.0) %></td>
          </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<script>
  var ctx = document.getElementById("myChart");
  var scatterChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: <%= raw [''] + data.keys %>,
      datasets: [{
          label: "Amazon",
          data: <%= raw [0] + data.values %>,
          fill: true,
          lineTension: 0,
          backgroundColor: "rgba(75,192,192,0.4)",
          borderColor: "rgba(75,192,192,1)",
          borderCapStyle: 'butt',
          borderDashOffset: 0.0,
          borderJoinStyle: 'miter',
          pointBorderColor: "rgba(75,192,192,1)",
          pointBackgroundColor: "#fff",
          pointBorderWidth: 1,
          pointHoverRadius: 5,
          pointHoverBackgroundColor: "rgba(75,192,192,1)",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointHoverBorderWidth: 5,
          pointRadius: 5,
          pointHitRadius: 10,
        }
      ]
    },
    options: {
      scales: {
        yAxes: [
          {
            ticks: {
              callback: function(label, index, labels) {
                var currency = parseFloat(label * 0.01);
                return " £" + Number(currency).toFixed(2);
              }
            }
          }
        ]
      },
      tooltips: {
        callbacks: {
          label: function(tooltipItem, data) {
            var currency = parseFloat(tooltipItem.yLabel * 0.01);
            return " £" + Number(currency).toFixed(2);
          }
        }
      }
    }
  });
</script>

<div class="ui segment">
  <p><%= @amazon_product.features.to_sentence %></p>
</div>

